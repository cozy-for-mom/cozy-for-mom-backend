name: Java CD with Gradle and Docker

on:
  push:
    branches: [ "main", "develop" ]
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: make application-dev.yml
        run: |
          cd ./src/main/resources    
          echo "${{ secrets.DEV_YML }}" > application-dev.yml
        shell: bash

      - name: Generate Environment Variables File for Production
        run: |
          echo "MYSQL_DATABASE_NAME=${{ secrets.MYSQL_DATABASE_NAME }}" >> .env
          echo "MYSQL_DATABASE_PASSWORD=${{ secrets.MYSQL_DATABASE_PASSWORD }}" >> .env
          echo "MYSQL_DATABASE_URL=${{ secrets.MYSQL_DATABASE_URL }}" >> .env
          echo "MYSQL_DATABASE_USERNAME=${{ secrets.MYSQL_DATABASE_USERNAME }}" >> .env
          echo "AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env
          echo "KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}" >> .env
          echo "KAKAO_APP_ADMIN_KEY=${{ secrets.KAKAO_APP_ADMIN_KEY }}" >> .env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
          echo "APPLE_KEY_ID=${{ secrets.APPLE_KEY_ID }}" >> .env
          echo "APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}" >> .env
          echo "APPLE_CLIENT_ID=${{ secrets.APPLE_CLIENT_ID }}" >> .env
          echo "APPLE_AUTH_KEY_PATH=${{ secrets.APPLE_AUTH_KEY_PATH }}" >> .env
          echo "APPLE_APNS_CERT_PATH=${{ secrets.APPLE_APNS_CERT_PATH }}" >> .env
          echo "APPLE_APNS_CERT_PASSWORD=${{ secrets.APPLE_APNS_CERT_PASSWORD }}" >> .env

      - name: Set application-dev.yml
        run: |
          sed -i "s|@MYSQL_DATABASE_NAME@|${{ secrets.MYSQL_DATABASE_NAME }}|g" ./src/main/resources/application-dev.yml
          sed -i "s|@MYSQL_DATABASE_PASSWORD@|${{ secrets.MYSQL_DATABASE_PASSWORD }}|g" ./src/main/resources/application-dev.yml
          sed -i "s|@MYSQL_DATABASE_URL@|${{ secrets.MYSQL_DATABASE_URL }}|g" ./src/main/resources/application-dev.yml
          sed -i "s|@MYSQL_DATABASE_USERNAME@|${{ secrets.MYSQL_DATABASE_USERNAME }}|g" ./src/main/resources/application-dev.yml
          sed -i "s|@AWS_S3_BUCKET@|${{ secrets.AWS_S3_BUCKET }}|g" ./src/main/resources/application-dev.yml
          sed -i "s|@AWS_REGION@|${{ secrets.AWS_REGION }}|g" ./src/main/resources/application-dev.yml
          sed -i "s|@AWS_ACCESS_KEY@|${{ secrets.AWS_ACCESS_KEY }}|g" ./src/main/resources/application-dev.yml
          sed -i "s|@AWS_SECRET_ACCESS_KEY@|${{ secrets.AWS_SECRET_ACCESS_KEY }}|g" ./src/main/resources/application-dev.yml
          sed -i "s|@KAKAO_CLIENT_ID@|${{ secrets.KAKAO_CLIENT_ID }}|g" ./src/main/resources/application-dev.yml
          sed -i "s|@KAKAO_CLIENT_SECRET@|${{ secrets.KAKAO_CLIENT_SECRET }}|g" ./src/main/resources/application-dev.yml
          sed -i "s|@KAKAO_APP_ADMIN_KEY@|${{ secrets.KAKAO_APP_ADMIN_KEY }}|g" ./src/main/resources/application-dev.yml
          sed -i "s|@REDIS_HOST@|${{ secrets.REDIS_HOST }}|g" ./src/main/resources/application-dev.yml
          sed -i "s|@REDIS_PORT@|${{ secrets.REDIS_PORT }}|g" ./src/main/resources/application-dev.yml
          sed -i "s|@REDIS_PASSWORD@|${{ secrets.REDIS_PASSWORD }}|g" ./src/main/resources/application-dev.yml
          sed -i "s|@APPLE_KEY_ID@|${{ secrets.APPLE_KEY_ID }}|g" ./src/main/resources/application-dev.yml
          sed -i "s|@APPLE_TEAM_ID@|${{ secrets.APPLE_TEAM_ID }}|g" ./src/main/resources/application-dev.yml
          sed -i "s|@APPLE_CLIENT_ID@|${{ secrets.APPLE_CLIENT_ID }}|g" ./src/main/resources/application-dev.yml
          sed -i "s|@APPLE_AUTH_KEY_PATH@|${{ secrets.APPLE_AUTH_KEY_PATH }}|g" ./src/main/resources/application-dev.yml
          sed -i "s|@APPLE_APNS_CERT_PATH@|${{ secrets.APPLE_APNS_CERT_PATH }}|g" ./src/main/resources/application-dev.yml
          sed -i "s|@APPLE_APNS_CERT_PASSWORD@|${{ secrets.APPLE_APNS_CERT_PASSWORD }}|g" ./src/main/resources/application-dev.yml

      - name: Set apple auth key
        run: |
          cd ./src/main/resources    
          pwd   
          mkdir -p "$(dirname "${{ secrets.APPLE_AUTH_KEY_PATH }}")"
          echo "${{ secrets.APPLE_AUTH_KEY }}" > ${{ secrets.APPLE_AUTH_KEY_PATH }}
          chmod 600 ${{ secrets.APPLE_AUTH_KEY_PATH }}
        shell: bash

      - name: Set apple apns cert
        run: |
          cd ./src/main/resources    
          pwd
          echo "${{ secrets.APPLE_APNS_CERT }}" | base64 -d > "${{ secrets.APPLE_APNS_CERT_PATH }}"
          chmod 600 ${{ secrets.APPLE_APNS_CERT_PATH }}
        shell: bash

      - name: Grant execute permisson for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle (without Test)
        run: ./gradlew clean build -x test --stacktrace

      ## docker-compose 설치
      - name: Set up Docker-Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.28.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Docker Hub build & push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker-compose build
          docker images
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

      - name: Deploy to Prod WAS Server
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_KEY }}
          port: ${{ secrets.AWS_PORT }}
          script: |
            cd /home/ubuntu/cozy-dev/
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            sudo docker-compose down
            sudo docker rm -f $(sudo docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
            sudo docker-compose up -d
            sudo docker image prune -f

